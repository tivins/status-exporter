#!/usr/bin/env php
<?php
/**
 *
 * Download:
 *
 * git clone https://gist.github.com/fb2cc09b38bab1c33ab615bbcb424e0e.git machineinfo
 *
 * Usage:
 *
 * ./machineinfo
 */

/**
 * Output data
 */
$data = [
    'sys' => [
        'uptime' => getUptimeInfo(),
        'cpu' => getCPUInfo(),
        'cpupc' => getCPUPercentage(),
        'mem' => getMemInfo(),
        'stat' => getCoreInformation(),
        'df' => [
            '/' => [
                'free' => disk_free_space('/'),
                'total' => disk_total_space('/'),
            ],
        ],
        'mail.err' => getMailErr()
    ],
];

echo json_encode($data, JSON_PRETTY_PRINT), PHP_EOL;
exit(0);

// ------------------

/**
 * @return array
 */
function getUptimeInfo()
{
    return [
        'cmd' => trim(shell_exec('uptime -p')),
        'proc' => trim(shell_exec('cat /proc/uptime')),
    ];
}

/**
 * @return array|false
 */
function getMemInfo()
{
    $mem = array_map(
        fn(string $line) => array_map('trim', explode(':', trim($line), 2)),
        file('/proc/meminfo')
    );
    return array_combine(array_column($mem, 0), array_column($mem, 1));
}

/**
 * @return array
 */
function getCPUInfo(): array
{
    $cpu = array_filter(explode("\n\n", file_get_contents('/proc/cpuinfo')));
    return array_map(
        function ($group) {
            $tab = array_map(
                fn(string $line) => array_map('trim', explode(':', $line, 2)),
                explode("\n", $group)
            );
            return array_combine(array_column($tab, 0), array_column($tab, 1));
        },
        $cpu
    );
}

/**
 * Source: https://gist.github.com/rlemon/1780212
 *
 * @return array
 */
function getCoreInformation(): array
{
    $data  = file('/proc/stat');
    $cores = array();
    foreach ($data as $line) {
        if (preg_match('/^cpu[0-9]/', $line)) {
            $info    = explode(' ', $line);
            $cores[] = array(
                'user' => $info[1],
                'nice' => $info[2],
                'sys' => $info[3],
                'idle' => $info[4]
            );
        }
    }
    return $cores;
}

/**
 * Source: https://gist.github.com/rlemon/1780212
 *
 * @return array
 */
function getCpuPercentages($stat1, $stat2): array
{
    if (count($stat1) !== count($stat2)) {
        return [];
    }
    $cpus = array();
    for ($i = 0, $l = count($stat1); $i < $l; $i++) {
        $dif         = array();
        $dif['user'] = $stat2[$i]['user'] - $stat1[$i]['user'];
        $dif['nice'] = $stat2[$i]['nice'] - $stat1[$i]['nice'];
        $dif['sys']  = $stat2[$i]['sys'] - $stat1[$i]['sys'];
        $dif['idle'] = $stat2[$i]['idle'] - $stat1[$i]['idle'];
        $total       = array_sum($dif);
        $cpu         = array();
        foreach ($dif as $x => $y) $cpu[$x] = round($y / $total * 100, 1);
        $cpus['cpu' . $i] = $cpu;
    }
    return $cpus;
}

/**
 * Source: https://gist.github.com/rlemon/1780212
 *
 * @return array
 */
function getCPUPercentage(): array
{

    /* get core information (snapshot) */
    $stat1 = getCoreInformation();
    /* sleep on server for one second */
    sleep(1);
    /* take second snapshot */
    $stat2 = getCoreInformation();
    /* get the cpu percentage based off two snapshots */
    return getCpuPercentages($stat1, $stat2);
}

function getMailErr(): ?array
{
    if (!is_readable('/var/log/mail.err')) {
        return null;
    }
    return array_filter(file('/var/log/mail.err'), fn(string $line) => stripos($line, 'warning') !== false);
}
